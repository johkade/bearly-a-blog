---
import GrainyBackground from "../components/GrainyBackground.astro"

export interface Props {
  title: string
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <GrainyBackground />
    <div id="main-wrapper">
      <div id="rocket-bear">
        <img
          src="/assets/rocket_bear.gif"
          alt="It's a rocket bear"
          width="24px"
          height="40px"
        />
      </div>
      <main id="main">
        <div id="back-to-home-container">
          <a href="/blog">&larr; Back to articles</a>
        </div>
        <slot />
      </main>
    </div>
  </body>
</html>

<script>
  // Start: Code for adding copy-icon to each code block.
  function extractTextWithIndentation(element: Element, indent = "") {
    let text = ""
    let children = element.children
    if (!children.length) return ""

    for (let i = 0; i < children.length; i++) {
      let currentChild = children[i]
      if (
        currentChild.nodeType === Node.ELEMENT_NODE &&
        currentChild.textContent !== null
      ) {
        text += `${indent}${currentChild.textContent.trim()}\n`
      } else if (currentChild.nodeType === Node.ELEMENT_NODE) {
        // Recursively extract text content from child element
        text += extractTextWithIndentation(currentChild, `${indent}  `)
      }
    }
    return text
  }

  function copyCode(element: Element) {
    const code = extractTextWithIndentation(element)
    navigator.clipboard.writeText(code)
    const existingTags = element.getElementsByClassName("astro-code-copied-tag")
    if (!existingTags.length) {
      const copiedTag = document.createElement("div")
      copiedTag.textContent = "Copied âœ“"
      copiedTag.classList.add("astro-code-copied-tag")
      const copiedTagEdge = document.createElement("div")
      copiedTagEdge.classList.add("astro-code-copied-tag-edge")
      copiedTag.appendChild(copiedTagEdge)
      element.appendChild(copiedTag)
      setTimeout(() => element.removeChild(copiedTag), 1000)
    }
  }

  const codeBlocks = document.getElementsByClassName("astro-code")
  for (let i = 0; i < codeBlocks.length; i++) {
    const currentCodeBlock = codeBlocks[i]
    const shape1 = document.createElement("div")
    const shape2 = document.createElement("div")
    shape1.classList.add("astro-code-copy")
    shape2.classList.add("astro-code-copy", "astro-code-copy-second")
    shape1.appendChild(shape2)
    currentCodeBlock.appendChild(shape1)

    shape1.onclick = () => copyCode(currentCodeBlock)
  }
  // End

  // Start: Rocket bear
  function getRandomNumber(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1) + min)
  }
  function getOffset(el: Element) {
    const rect = el.getBoundingClientRect()
    return {
      left: rect.left + window.scrollX,
      top: rect.top + window.scrollY,
    }
  }
  function getRotation({
    x1,
    y1,
    x2,
    y2,
  }: Record<"x1" | "y1" | "x2" | "y2", number>) {
    const deltaX = x2 - x1
    const deltaY = y2 - y1
    const radianAngle = Math.atan2(deltaY, deltaX)
    const degreeAngle = radianAngle * (180 / Math.PI)
    return degreeAngle
  }
  function moveRandomly() {
    const div = document.getElementById("rocket-bear")
    if (!div) return

    const { left: x1, top: y1 } = getOffset(div)

    const windowWidth = window.innerWidth
    const windowHeight = window.innerHeight

    // Generate random position coordinates for the div and set it
    const x2 = getRandomNumber(0, windowWidth - div.offsetWidth)
    const y2 = getRandomNumber(0, windowHeight - div.offsetHeight)

    const rotation = getRotation({ x1, y1, x2, y2 })

    div.style.left = x2 + "px"
    div.style.top = y2 + "px"
    div.style.rotate = rotation + 90 + "deg"
  }
  // Move initially
  moveRandomly()
  // Move the div randomly every 2 seconds
  setInterval(moveRandomly, 10000)
  // End

  document.onscroll = () => {
    const bear = document.getElementById("rocket-bear")
    if (!bear) return
    bear.style.opacity = "0"
    // @ts-ignore
    clearTimeout(window.scrollEndTimer)
    // @ts-ignore
    window.scrollEndTimer = setTimeout(() => {
      const bear = document.getElementById("rocket-bear")
      if (!bear) return
      bear.style.opacity = "1"
    }, 60000)
  }
</script>

<style is:global>
  :root {
    --accent: 124, 58, 237;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      #da62c4 30%,
      white 60%
    );
  }
  html {
    font-family: system-ui, sans-serif;
    background-color: #0c0914;
    color: #f9f9f9;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }
  #rocket-bear {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 50%;
    opacity: 0;
    transition: left 10s ease-out, top 10s ease-out, rotate 0.5s ease-out,
      opacity 1s ease-out;
    -webkit-transform: translate3d(0, 0, 0);
  }
  #back-to-home-container {
    line-height: 1.6;
    margin: 1rem 0;
    display: flex;
    align-self: flex-start;
    border-radius: 0.4rem;
  }
  #back-to-home-container a {
    color: white;
  }
  #back-to-home-container a:hover {
    color: #eda0ed;
  }
  .full-width-image {
    width: 100%;
  }
  #main-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-left: 24px;
    padding-right: 24px;
  }
  #main {
    width: 100%;
    max-width: 880px;
    align-self: center;
  }
  h1 {
    font-size: 32px;
    background: -webkit-linear-gradient(left, #f2c4e5, #db88c4);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  h2 {
    font-size: 24px;
    color: #f9f9f9;
    letter-spacing: 0.04;
  }
  p {
    font-size: 16px;
    line-height: 20px;
    font-weight: 300;
    letter-spacing: 0.09;
    color: #d9d9d9;
  }
  p code {
    font-size: 16px;
    line-height: 20px;
    color: #f2baf0;
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    background-color: #3c173ca9;
    border-radius: 2px;
    padding: 2px 4px 2px 4px;
  }
  a {
    color: #f396f0;
    font-weight: 400;
  }
  a:hover {
    color: #f396f099;
    text-decoration: underline;
  }
  .astro-code {
    background-color: #5e255420 !important;
    composes: commonBlur !important;
    backdrop-filter: blur(80px) !important;
    -webkit-backdrop-filter: blur(80px) !important;
    filter: blur(80) !important;
    padding: 16px !important;
    border-radius: 12px !important;
    transition: background-color 0.2s ease-out 100ms;
    border: 1px solid #f396f099;
    box-shadow: #f396f028 0px 0px 48px, inset 0 0 96px #f396f011;
  }
  .astro-code:hover {
    background-color: #5e255430 !important;
  }
  .astro-code:hover .astro-code-copy {
    display: block;
    opacity: 1;
  }
  .astro-code-copy {
    position: absolute;
    top: 12px;
    right: 12px;
    width: 16px;
    height: 16px;
    background-color: #f2c4e522;
    border: 1px solid #f2c4e588;
    border-radius: 6px;
    display: none;
    cursor: pointer;
  }
  .astro-code-copy-second {
    top: 4px;
    right: 4px;
    transition: opacity 1.1s, visibility 1.1s;
  }
  .astro-code-copied-tag {
    position: absolute;
    top: 14px;
    right: 48px;
    background-color: #62da7855;
    color: #61e279;
    padding: 2px 8px 2px 8px;
    border-radius: 4px;
    transition: opacity 1.1s, visibility 1.1s;
    animation-name: tag-animation;
    animation-duration: 0.5s;
    opacity: 1;
  }
  .astro-code-copied-tag-edge {
    position: absolute;
    width: 0;
    height: 0;
    border-top: 4px solid transparent;
    border-bottom: 4px solid transparent;
    border-left: 4px solid #62da7855;
    top: 6px;
    right: -4px;
  }
  @keyframes tag-animation {
    from {
      opacity: 0;
      right: 44px;
    }
    to {
      opacity: 1;
      right: 48px;
    }
  }
</style>
